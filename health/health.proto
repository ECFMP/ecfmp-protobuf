syntax = "proto3";

package grpc.health.v1;
option go_package = "ecfmp.vatsim.net/grpc/health";

/**
 * The request to perform a health check on a service.
 */
message HealthCheckRequest { string service = 1; }

/**
 * The status of one health check.
 */
message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1; // Serving indicates that this member is serving requests.
    NOT_SERVING =
        2; // NotServing indicates that this member is not serving requests.
    SERVICE_UNKNOWN = 3; // Used only by the Watch method.
  }
  ServingStatus status = 1;
}

/**
 * The health checking service definition.
 */
service Health {
  /**
   * Checks the health of a member of the service.  The request is empty.
   *
   * The implementation of this method must be consistent with the
   * implementation of Watch.
   */
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);

  /**
   * Watches for the serving status of the requested service.
   *
   * The server will immediately send back a message indicating the current
   * serving status.  It will then subsequently send a new message whenever
   * the service's serving status changes.
   *
   * If the requested service does not exist on the server this method will
   * return an error.
   */
  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);
}
